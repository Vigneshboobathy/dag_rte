# DAG Project

A simple **Directed Acyclic Graph (DAG)** implementation in Go, with LevelDB persistence and a REST API for node operations.

🛠️ Tech Stack
* Go
* LevelDB
* Gorilla Mux
* Zap Logger
* Viper

## 📌 Features
- Add new nodes (with or without parents)
- Approve nodes (referencing parent nodes)
- Retrieve tips (nodes with no parents or unapproved)
- Tip selection logic
- Create and retrieve checkpoints
- Expose sync state (latest checkpoint, node/tip counts, root hash)
- LevelDB as storage
- JSON API responses


## 📂 Project Structure

├── config/ # YAML configuration files
├── dag/ # DAG logic
├── db/ # Database connection to LevelDB
├── handlers/ # HTTP request handlers
├── logger/ # Logging setup (zap)
├── models/ # Data structures
├── repository/ # Repository layer (DB operations)
├── routers/ # Route definitions
├── main.go # Entry point
└── go.mod


## ⚙️ Configuration
Configuration is loaded from `config/config.yaml`:

## Running the Program
go run cmd/main.go

## base url: http://localhost:8080

## Endpoints
### 1. Add Node
**POST** `/nodes`

Creates a new node in the DAG with no parents initially.

#### Request Body
```json
{
    "id": "1",
}
```

### 2. Approve Node
**POST** `/nodes/approve`

Approves a new node that references previous node(s) as parents. This also increases the weight of each parent by 1.

#### Request Body
```json
{
    "id": "5",
    "parents": ["1"]
}
```

### 3. Get Highest Weight Node
**GET** `/nodes/highest-weight`

Retrieves the node with the highest direct weight in the DAG.

#### Response Body
```json
{
    "message": "highest weighted node",
    "node": {
        "id": "1",
        "weight": 5,
        "cumulative_weight": 5,
        "created_at": 1755166584662
    }
}
```

### 4. Get Highest Cumulative Weight Node
**GET** `/nodes/highest-cumulative-weight`

Retrieves the node with the highest cumulative weight, which includes both direct approvals and indirect approvals through descendant nodes. This provides a more accurate measure of node importance in the DAG structure.

#### Response Body
```json
{
    "message": "highest cumulative weighted node",
    "node": {
        "id": "1",
        "weight": 2,
        "cumulative_weight": 5,
        "created_at": 1755159211237
    },
    "weight_info": {
        "cumulative_weight": 5,
        "direct_weight": 2
    }
}
```
### 5. Get Tips
**GET** `/nodes/tip-selection`

Check selected tip via MCMC

#### Response Body

```json
{
    "id": "101",
    "parents": null,
    "weight": 0,
    "cumulative_weight": 0,
    "created_at": 1755165788511
  }
  ```

### 6. Create Checkpoint
**POST** `/checkpoints`

Creates a new checkpoint from the current DAG state.

#### Request Body
```json
{
  "id": "cp1"
}
```

#### Response Body
```json
{
  "checkpoint_id": "cp1",
  "timestamp": 1755166584662,
  "root_hash": "<sha256-of-concatenated-node-ids>",
  "node_count": 2
}
```

### 7. Get Latest Checkpoint
**GET** `/checkpoints/latest`

Retrieves the most recent checkpoint by timestamp.

#### Response Body
```json
{
  "checkpoint_id": "cp1",
  "timestamp": 1755166584662,
  "root_hash": "<sha256-of-concatenated-node-ids>",
  "node_count": 2
}
```

### 8. Get Sync State
**GET** `/sync/state`

Returns current DAG synchronization state.

#### Response Body
```json
{
  "latest_checkpoint": {
    "checkpoint_id": "cp1",
    "timestamp": 1755166584662,
    "root_hash": "<sha256-of-concatenated-node-ids>",
    "node_count": 2
  },
  "node_count": 2,
  "tip_count": 1,
  "root_hash": "<sha256-of-concatenated-node-ids>",
  "timestamp": 1755166590000
}
```

Note: `tip_count` is the number of nodes with no children (unapproved tips)

## Running Tests

This project includes unit tests for handler functions, validating:
- Node creation 
- Duplicate node handling
- Node approval and parent weight increment 
- Missing parent validation
- Retrieving highest direct weight node 
- Retrieving highest-cumulative weight node
- Tip selection using MCMC algorithm
- Dag state synchronization process

### Run all tests
go test ./... -v

## Run tests with coverage percentage
go test ./... -cover