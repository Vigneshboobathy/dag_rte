# DAG Project

A simple **Directed Acyclic Graph (DAG)** implementation in Go, with LevelDB persistence and a REST API for node operations.

🛠️ Tech Stack
* Go
* LevelDB
* Gorilla Mux
* Zap Logger
* Viper

## 📌 Features
- Add new nodes (with or without parents)
- Approve nodes (referencing parent nodes)
- Retrieve tips (nodes with no parents or unapproved)
- Tip selection logic
- LevelDB as storage
- JSON API responses

## 📂 Project Structure

├── config/ # YAML configuration files
├── dag/ # DAG logic
├── db/ # Database connection to LevelDB
├── handlers/ # HTTP request handlers
├── logger/ # Logging setup (zap)
├── models/ # Data structures
├── repository/ # Repository layer (DB operations)
├── routers/ # Route definitions
├── main.go # Entry point
└── go.mod


## ⚙️ Configuration
Configuration is loaded from `config/config.yaml`:

```yaml
server:
  port: 8080

leveldb:
  path: "./data"

log:
  app_log_file: "logs/app.log"
  level: "debug"

## Running the Program
go run cmd/main.go

## base url: http://localhost:8080

## Endpoints
### 1. Add Node
**POST** `/nodes`

Creates a new node in the DAG with no parents initially.

#### Request Body
```json
{
    "id": "B",
    "parents": []
}
```

### 2. Approve Node
**POST** `/nodes/approve`

Approves a new node that references previous node(s) as parents. This also increases the weight of each parent by 1.

#### Request Body
```json
{
  "id": "string",
  "parents": ["parent_node_id_1", "parent_node_id_2"]
}
```

### 3. Get Highest Weight Node
**GET** `/nodes/highest-weight`

Retrieves the node with the highest weight in the DAG.

### 4. Get Tips
**GET** `/nodes/tips-selection`

Check selected tip via MCMC

## Running Tests

This project includes unit tests for handler functions, validating:
- Node creation (`/nodes`)
- Duplicate node handling
- Node approval and parent weight increment (`/nodes/approve`)
- Missing parent validation
- Retrieving highest-weight node (`/nodes/highest-weight`)
- Tip selection using MCMC algorithm (`/nodes/tip-selection`)

### Run all tests
go test ./... -v

## Run tests with coverage percentage
go test ./... -cover